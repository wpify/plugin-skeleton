<?xml version="1.0"?>
<ruleset name="Wpify">
  <description>WPify Coding Standards</description>
  <!-- https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties -->

  <arg value="-colors"/>
  <arg value="s"/>

  <exclude-pattern>/vendor/*</exclude-pattern>
  <exclude-pattern>/node_modules/*</exclude-pattern>

  <rule ref="PSR12">
    <exclude name="Generic.NamingConventions.CamelCapsFunctionName" />
    <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps" />
  </rule>

	<rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired" />
  <rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties>
			<property name="maxPadding" value="40"/>
		</properties>
	</rule>
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
	<rule ref="Squiz.PHP.EmbeddedPhp"/>
	<rule ref="Squiz.PHP.EmbeddedPhp.SpacingBefore">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.Indent">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.OpenTagIndent">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.SpacingAfter">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
	<rule ref="PSR2.Files.ClosingTag"/>
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="spacing" value="1"/>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.PHP.DiscourageGoto">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule>
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>
	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>
	<rule ref="Generic.Files.EndFileNewline"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.LowerCaseKeyword"/>
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<rule ref="Generic.Functions.CallTimePassByReference"/>
	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
	<rule ref="Generic.Classes.DuplicateClassName"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat">
		<properties>
			<property name="allowMultiline" value="true"/>
		</properties>
	</rule>
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Squiz.Operators.IncrementDecrementUsage"/>
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="PEAR.Files.IncludingFile.BracketsNotRequired">
		<type>warning</type>
	</rule>
	<rule ref="PEAR.Files.IncludingFile.UseRequire">
		<type>warning</type>
	</rule>
	<rule ref="PEAR.Files.IncludingFile.UseRequireOnce">
		<type>warning</type>
	</rule>
	<rule ref="Generic.Files.OneObjectStructurePerFile">
		<type>warning</type>
		<message>Best practice suggestion: Declare only one class/interface/trait in a file.</message>
	</rule>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="PSR2.Classes.PropertyDeclaration"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
	<rule ref="PSR2.Methods.MethodDeclaration"/>
	<rule ref="Squiz.Classes.SelfMemberReference.NotUsed">
		<severity>5</severity>
	</rule>
	<rule ref="Generic.PHP.BacktickOperator"/>
	<rule ref="Generic.PHP.Syntax"/>
	<rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
  <rule ref="Generic.Arrays.ArrayIndent">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
    <properties>
        <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="PSR2.Methods.FunctionCallSignature">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="PSR12.Classes.AnonClassDeclaration">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="PSR2.ControlStructures.SwitchDeclaration">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="PSR12.ControlStructures.ControlStructureSpacing">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="Squiz.Classes.ClassDeclaration">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
  <rule ref="Squiz.CSS.Indentation">
    <properties>
      <property name="indent" value="2" />
    </properties>
  </rule>
</ruleset>
